/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.superadminrole;

import business.Business;
import business.enterprise.Enterprise;
import business.network.Network;
import business.parentnetwork.ParentNetwork;
import business.person.customer.Customer;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raseswaridas
 */
public class SAManageCustomersJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private Business business;
    private ArrayList<Customer> customerList;
    /**
     * Creates new form ManageCustomersJPanel
     */
    public SAManageCustomersJPanel(JPanel userProcessContainer, Business business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        populateCountryCombo();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        comboCountry = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        comboCity = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        comboBranch = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCustomer = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(102, 102, 238));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 204, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Customers");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 204, 0));
        jLabel2.setText("Select Branch Details:");

        jLabel22.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 204, 0));
        jLabel22.setText("Country:");

        comboCountry.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboCountry.setEnabled(false);
        comboCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCountryActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("YuGothic", 3, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 204, 0));
        jLabel12.setText("City:");

        comboCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboCity.setEnabled(false);
        comboCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCityActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("YuGothic", 3, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 204, 0));
        jLabel13.setText("Branch:");

        comboBranch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBranch.setEnabled(false);
        comboBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBranchActionPerformed(evt);
            }
        });

        tableCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Email", "Phone", "Membership"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableCustomer);

        btnDelete.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 153, 0));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 153, 0));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnBack)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnDelete))
                                    .addComponent(jLabel2)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel22)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboCity, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 390, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(comboBranch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnBack))
                .addContainerGap(628, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void populateCountryCombo() {
        JComboBox countryCombo = comboCountry;
        countryCombo.removeAllItems();
        int counter = 0;
        for (ParentNetwork parentNetwork : business.getParentNetworkDirectory().getParentNetworkList()) {
            if (counter == 0) {
                populateCityCombo(parentNetwork);
            }
            countryCombo.addItem(parentNetwork);
            counter++;
        }
        countryCombo.setEnabled(true);
    }

    public void populateCityCombo(ParentNetwork parentNetwork) {
        JComboBox cityCombo = comboCity;
        cityCombo.removeAllItems();
        for (ParentNetwork pn : business.getParentNetworkDirectory().getParentNetworkList()) {
            if (parentNetwork.getId() == pn.getId()) {
                int counter = 0;
                for (Network network : pn.getNetworkDirectory().getNetworkList()) {
                    if (counter == 0) {
                        populateBranchCombo(parentNetwork, network);
                    }
                    cityCombo.addItem(network);
                    counter++;
                }
                cityCombo.setEnabled(true);
                break;
            }
        }
    }

    public void populateBranchCombo(ParentNetwork parentNetwork, Network network) {
        JComboBox branchCombo = comboBranch;
        branchCombo.removeAllItems();
        for (ParentNetwork pn : business.getParentNetworkDirectory().getParentNetworkList()) {
            if (parentNetwork.getId() == pn.getId()) {
                for (Network n : pn.getNetworkDirectory().getNetworkList()) {
                    if (network.getId() == n.getId()) {
                        int counter = 0;
                        for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                            if(counter == 0){
                                setCustomerList(pn,n,e);
                            }
                            branchCombo.addItem(e);
                        }
                        populateTable();
                        comboBranch.setEnabled(true);
                        break;
                    }
                }
                break;
            }
        }
    }
    
    public void setCustomerList(ParentNetwork pn, Network n, Enterprise e){
        for(ParentNetwork parentNetwork : business.getParentNetworkDirectory().getParentNetworkList()){
            if(pn.getId() == parentNetwork.getId()){
                for(Network network : parentNetwork.getNetworkDirectory().getNetworkList()){
                    if(network.getId() == n.getId()){
                        for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
                            if(enterprise.getId() == e.getId()){
                                this.customerList = enterprise.getCustomerDirectory().getCustomerList();
                            }  
                        }
                        break;
                    }
                }
                break;
            }
        }
    }
                       
    public void populateTable() {
        tableCustomer.removeAll();
        DefaultTableModel dtm = (DefaultTableModel) tableCustomer.getModel();
        dtm.setRowCount(0);
        
        for(Customer customer: customerList){
            Object row[] = new Object[5];
            row[0] = customer;
            row[1] = customer.getFirstName();
            row[2] = customer.getEmail();
            row[3] = customer.getMobile();
            row[4] = customer.getMembership();
            dtm.addRow(row);
        }
    }
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void comboCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCountryActionPerformed
        // TODO add your handling code here:
        if (comboCountry.isEnabled()) {
            comboCity.setEnabled(false);
            comboBranch.setEnabled(false);
            ParentNetwork parentNetwork = (ParentNetwork) comboCountry.getSelectedItem();
            populateCityCombo(parentNetwork);
            comboCity.setEnabled(true);
        }
    }//GEN-LAST:event_comboCountryActionPerformed

    private void comboCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCityActionPerformed
        // TODO add your handling code here:
        if (comboCity.isEnabled()) {
            ParentNetwork parentNetwork = (ParentNetwork) comboCountry.getSelectedItem();
            Network network = (Network) comboCity.getSelectedItem();
            comboBranch.setEnabled(false);
            populateBranchCombo(parentNetwork, network);
        }
    }//GEN-LAST:event_comboCityActionPerformed

    private void comboBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBranchActionPerformed
        // TODO add your handling code here:
        if(comboBranch.isEnabled()){
            ParentNetwork pn = (ParentNetwork) comboCountry.getSelectedItem();
            Network n = (Network) comboCity.getSelectedItem();
            Enterprise e = (Enterprise) comboBranch.getSelectedItem();
            setCustomerList(pn, n, e);
            populateTable();
        }
    }//GEN-LAST:event_comboBranchActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedrow = tableCustomer.getSelectedRow();
        
        if(selectedrow >= 0)
        {
            Customer customer = (Customer)tableCustomer.getValueAt(selectedrow, 0);
            int reply = JOptionPane.showConfirmDialog(null, "Do you really want to delete?");
            if (reply == JOptionPane.YES_OPTION)
            {
                customerList.remove(customer);
                JOptionPane.showMessageDialog(null, "Customer has been deleted");
                populateTable();
            }
        }
        else
            JOptionPane.showMessageDialog(null,"Please select any row");
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JComboBox<String> comboBranch;
    private javax.swing.JComboBox<String> comboCity;
    private javax.swing.JComboBox comboCountry;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableCustomer;
    // End of variables declaration//GEN-END:variables
}
