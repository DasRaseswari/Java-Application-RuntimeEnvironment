/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.superadminrole;

import business.Business;
import business.enterprise.Enterprise;
import business.network.Network;
import business.organization.groupclasses.GroupClasses;
import business.parentnetwork.ParentNetwork;
import business.person.employee.Employee;
import business.role.Role;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raseswaridas
 */
public class SAManageGroupClassesJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Business business;
    private ArrayList<GroupClasses> groupClassesList;
    private GroupClasses selectedGroupClass = null;
//    private Employee selectedTrainer = null;

    /**
     * Creates new form ManageGroupClassesJPanel
     */
    public SAManageGroupClassesJPanel(JPanel userProcessContainer, Business business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        populateCountryCombo();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        comboCountry = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        comboCity = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        comboBranch = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtTime = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtDuration = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtCapacity = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableGroupClasses = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jComboTrainer = new javax.swing.JComboBox();

        jPanel1.setBackground(new java.awt.Color(102, 102, 238));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 204, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Group Classes");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 204, 0));
        jLabel2.setText("Select Branch Details:");

        jLabel22.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 204, 0));
        jLabel22.setText("Country:");

        comboCountry.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboCountry.setEnabled(false);
        comboCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCountryActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("YuGothic", 3, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 204, 0));
        jLabel12.setText("City:");

        comboCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboCity.setEnabled(false);
        comboCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCityActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("YuGothic", 3, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 204, 0));
        jLabel13.setText("Branch:");

        comboBranch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBranch.setEnabled(false);
        comboBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBranchActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("YuGothic", 3, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 204, 0));
        jLabel3.setText("Group Class Name:");

        txtName.setForeground(new java.awt.Color(51, 51, 255));

        jLabel10.setBackground(new java.awt.Color(255, 204, 0));
        jLabel10.setFont(new java.awt.Font("YuGothic", 3, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 204, 0));
        jLabel10.setText("Time:");

        jLabel4.setFont(new java.awt.Font("YuGothic", 3, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 204, 0));
        jLabel4.setText("Instructor:");

        jLabel11.setBackground(new java.awt.Color(255, 204, 0));
        jLabel11.setFont(new java.awt.Font("YuGothic", 3, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 204, 0));
        jLabel11.setText("Duration:");

        jLabel5.setFont(new java.awt.Font("YuGothic", 3, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 204, 0));
        jLabel5.setText("Capacity:");

        txtCapacity.setForeground(new java.awt.Color(51, 51, 255));

        btnCreate.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnCreate.setForeground(new java.awt.Color(255, 153, 0));
        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        tableGroupClasses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Time", "Instructor", "Duration", "Capacity", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableGroupClasses);
        if (tableGroupClasses.getColumnModel().getColumnCount() > 0) {
            tableGroupClasses.getColumnModel().getColumn(1).setResizable(false);
            tableGroupClasses.getColumnModel().getColumn(2).setResizable(false);
            tableGroupClasses.getColumnModel().getColumn(3).setResizable(false);
            tableGroupClasses.getColumnModel().getColumn(4).setResizable(false);
            tableGroupClasses.getColumnModel().getColumn(5).setResizable(false);
        }

        btnView.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnView.setForeground(new java.awt.Color(255, 153, 0));
        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 153, 0));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 153, 0));
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnEdit.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnEdit.setForeground(new java.awt.Color(255, 153, 0));
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        txtDescription.setColumns(20);
        txtDescription.setRows(5);
        jScrollPane2.setViewportView(txtDescription);

        jLabel6.setFont(new java.awt.Font("YuGothic", 3, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 204, 0));
        jLabel6.setText("Description:");

        btnBack.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 153, 0));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 153, 0));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jComboTrainer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboTrainer.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 739, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel22)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(comboCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(29, 29, 29)
                                    .addComponent(jLabel12)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(comboCity, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(27, 27, 27)
                                    .addComponent(jLabel13)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(comboBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(473, 473, 473)
                                    .addComponent(btnDelete)
                                    .addGap(27, 27, 27)
                                    .addComponent(btnView))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel5)
                                                    .addGap(86, 86, 86))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel4)
                                                    .addGap(76, 76, 76)))
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jComboTrainer, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(btnEdit)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnSave)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(btnCreate))
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel3)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(80, 80, 80)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                            .addGap(26, 26, 26)
                                                            .addComponent(jLabel10))
                                                        .addComponent(jLabel11))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(txtTime)
                                                        .addComponent(txtDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel6)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(485, 485, 485))))
                        .addGap(0, 228, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(comboBranch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnView))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel11)
                    .addComponent(txtDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboTrainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnSave)
                    .addComponent(btnEdit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnClear))
                .addGap(65, 65, 65))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void populateTrainerCombo(ParentNetwork pn, Network n, Enterprise e){
        jComboTrainer.removeAllItems();
        for (ParentNetwork parentNetwork : business.getParentNetworkDirectory().getParentNetworkList()) {
            if (parentNetwork.getId() == pn.getId()) {
                for (Network network : pn.getNetworkDirectory().getNetworkList()) {
                    if (network.getId() == n.getId()) {
                        for (Enterprise enterprise : n.getEnterpriseDirectory().getEnterpriseList()) {
                            if(enterprise.getId() == e.getId()){
                                for(Employee employee: enterprise.getEmployeeDirectory().getEmployeeList()){
//                                    int counter = 0;
                                    if(employee.getRole().toString().equals(Role.RoleType.RegularTrainer.toString())){
//                                        if(counter == 0)
//                                            selectedTrainer = employee;
                                        jComboTrainer.addItem(employee);
//                                        counter++;
                                    }
                                }
                            }
                            jComboTrainer.setEnabled(true);
                        }
                        break;
                    }
                }
                break;
            }
        }
    }
    
    public void populateCountryCombo() {
        JComboBox countryCombo = comboCountry;
        countryCombo.removeAllItems();
        int counter = 0;
        for (ParentNetwork parentNetwork : business.getParentNetworkDirectory().getParentNetworkList()) {
            if (counter == 0) {
                populateCityCombo(parentNetwork);
            }
            countryCombo.addItem(parentNetwork);
            counter++;
        }
        countryCombo.setEnabled(true);
    }

    public void populateCityCombo(ParentNetwork parentNetwork) {
        JComboBox cityCombo = comboCity;
        cityCombo.removeAllItems();
        int counter = 0;
        for (ParentNetwork pn : business.getParentNetworkDirectory().getParentNetworkList()) {
            if (parentNetwork.getId() == pn.getId()) {
                for (Network network : pn.getNetworkDirectory().getNetworkList()) {
                    if (counter == 0) {
                        populateBranchCombo(parentNetwork, network);
                    }
                    cityCombo.addItem(network);
                    counter++;
                }
                cityCombo.setEnabled(true);
                break;
            }
        }
    }

    public void populateBranchCombo(ParentNetwork parentNetwork, Network network) {
        JComboBox branchCombo = comboBranch;
        branchCombo.removeAllItems();
        for (ParentNetwork pn : business.getParentNetworkDirectory().getParentNetworkList()) {
            if (parentNetwork.getId() == pn.getId()) {
                for (Network n : pn.getNetworkDirectory().getNetworkList()) {
                    if (network.getId() == n.getId()) {
                        int counter = 0;
                        for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                            if(counter == 0){
                                setGroupClassesList(pn,n,e);
                                populateTrainerCombo(pn,n,e);
                            }
                            branchCombo.addItem(e);
                        }
                        populateTable();
                        comboBranch.setEnabled(true);
                        break;
                    }
                }
                break;
            }
        }
    }
    
    public void setGroupClassesList(ParentNetwork pn, Network n, Enterprise e){
        for(ParentNetwork parentNetwork : business.getParentNetworkDirectory().getParentNetworkList()){
            if(pn.getId() == parentNetwork.getId()){
                for(Network network : parentNetwork.getNetworkDirectory().getNetworkList()){
                    if(network.getId() == n.getId()){
                        for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
                            if(enterprise.getId() == e.getId()){
                                this.groupClassesList = enterprise.getOrganizationDirectory().getGroupClassesDirectory().getGroupClassesList();
                            }  
                        }
                        break;
                    }
                }
                break;
            }
        }
    }
                       
    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) tableGroupClasses.getModel();
        dtm.setRowCount(0);
        
        for(GroupClasses groupClasses: groupClassesList){
            Object row[] = new Object[6];
            row[0] = groupClasses;
            row[1] = groupClasses.getTime();
            row[2] = groupClasses.getTrainer();
            row[3] = groupClasses.getDuration();
            row[4] = groupClasses.getCapacity();
            row[5] = groupClasses.getDescription();
            dtm.addRow(row);
        }
    }
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void comboCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCountryActionPerformed
        // TODO add your handling code here:
        if (comboCountry.isEnabled()) {
            comboCity.setEnabled(false);
            comboBranch.setEnabled(false);
            ParentNetwork parentNetwork = (ParentNetwork) comboCountry.getSelectedItem();
            populateCityCombo(parentNetwork);
            comboCity.setEnabled(true);
        }
    }//GEN-LAST:event_comboCountryActionPerformed

    private void comboCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCityActionPerformed
        // TODO add your handling code here:
        if (comboCity.isEnabled()) {
            ParentNetwork parentNetwork = (ParentNetwork) comboCountry.getSelectedItem();
            Network network = (Network) comboCity.getSelectedItem();
            comboBranch.setEnabled(false);
            populateBranchCombo(parentNetwork, network);
        }
    }//GEN-LAST:event_comboCityActionPerformed

    private void comboBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBranchActionPerformed
        // TODO add your handling code here:
        if(comboBranch.isEnabled()){
            ParentNetwork pn = (ParentNetwork) comboCountry.getSelectedItem();
            Network n = (Network) comboCity.getSelectedItem();
            Enterprise e = (Enterprise) comboBranch.getSelectedItem();
            setGroupClassesList(pn, n, e);
            populateTable();
            populateTrainerCombo(pn, n, e);
        }
    }//GEN-LAST:event_comboBranchActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedrow = tableGroupClasses.getSelectedRow();
        
        if(selectedrow >= 0)
        {
            GroupClasses groupClasses = (GroupClasses)tableGroupClasses.getValueAt(selectedrow, 0);
            int reply = JOptionPane.showConfirmDialog(null, "Do you really want to delete?");
            if (reply == JOptionPane.YES_OPTION)
            {
                groupClassesList.remove(groupClasses);
                JOptionPane.showMessageDialog(null, "Group class has been deleted");
                populateTable();
            }
        }
        else
            JOptionPane.showMessageDialog(null,"Please select any row");
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedrow = tableGroupClasses.getSelectedRow();

        if (selectedrow >= 0) {
            GroupClasses groupClasses = (GroupClasses) tableGroupClasses.getValueAt(selectedrow, 0);
            selectedGroupClass = groupClasses;
            txtName.setText(String.valueOf(groupClasses.getName()));
            txtTime.setText(String.valueOf(groupClasses.getTime()));
            jComboTrainer.setSelectedItem(groupClasses.getTrainer());
            txtDuration.setText(String.valueOf(groupClasses.getDuration()));
            txtCapacity.setText(String.valueOf(groupClasses.getCapacity()));
            txtDescription.setText(String.valueOf(groupClasses.getDescription()));
        }
        
        else{
            JOptionPane.showMessageDialog(null, "Please select any row to view");
        }
        btnEdit.setEnabled(true);
        btnCreate.setEnabled(false);
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        txtName.setEnabled(true);
        txtTime.setEnabled(true);
        jComboTrainer.setEnabled(true);
        txtDuration.setEnabled(true);
        txtCapacity.setEnabled(true);
        txtDescription.setEnabled(true);
        btnEdit.setEnabled(false);
        btnSave.setEnabled(true);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        removeValidationDisplay();
        Boolean isValid = validateForm();
        if (isValid) {
            saveFormToObject();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        clearForm();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        removeValidationDisplay();
        Boolean isValid = validateForm();
        if (isValid) {
            ParentNetwork pn = (ParentNetwork) comboCountry.getSelectedItem();
            Network n = (Network) comboCity.getSelectedItem();
            Enterprise e = (Enterprise) comboBranch.getSelectedItem();
            createGroupClass(pn,n,e);
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void clearForm() {
        
        txtName.setText(null);
        txtTime.setText(null);
        jComboTrainer.setSelectedIndex(0);
        txtDuration.setText(null);
        txtCapacity.setText(null);
        txtDescription.setEnabled(false);
        btnEdit.setEnabled(false);
        btnSave.setEnabled(false);
        btnCreate.setEnabled(true);
    }
    
    private Boolean validateForm() {
        int dialogShown = 0;
        Pattern pattern;
        Matcher matcher;

        pattern = Pattern.compile("^[a-zA-Z]+$");
        matcher = pattern.matcher(txtName.getText().trim());
        if (!matcher.matches()) {
            if (dialogShown <= 0) {
                dialogShown = 1;
            }
            txtName.setBackground(Color.PINK);
        }
        pattern = Pattern.compile("^[0-9]+$");
        matcher = pattern.matcher(txtTime.getText());
        if (!matcher.matches()) {
            if (dialogShown <= 0) {
                dialogShown = 2;
            }
            txtTime.setBackground(Color.PINK);
        }
        pattern = Pattern.compile("^[0-9]+$");
        matcher = pattern.matcher(txtDuration.getText().trim());
        if (!matcher.matches()) {
            if (dialogShown <= 0) {
                dialogShown = 4;
            }
            txtDuration.setBackground(Color.PINK);
        }
        pattern = Pattern.compile("^[0-9]+$");
        matcher = pattern.matcher(txtCapacity.getText().trim());
        if (!matcher.matches()) {
            if (dialogShown <= 0) {
                dialogShown = 5;
            }
            txtCapacity.setBackground(Color.PINK);
        }
        pattern = Pattern.compile("^[a-zA-Z]+$");
        matcher = pattern.matcher(txtDescription.getText());
        if (!matcher.matches()) {
            if (dialogShown <= 0) {
                dialogShown = 6;
            }
            txtDescription.setBackground(Color.PINK);
        }
        if (dialogShown == 0) {
            return true;
        } else {
            showValidationDialog(dialogShown);
            return false;
        }
    }
    
    private void showValidationDialog(int flag) {
        String errMessage = "";
        switch (flag) {

            case 1:
                errMessage = "Invalid Group Class Name Entered!";
                break;

            case 2:
                errMessage = "Invalid Time Entered!";
                break;
                
            case 3:
                errMessage = "Invalid Instructor Entered!";
                break;

            case 4:
                errMessage = "Invalid Duration Entered!";
                break;
                
            case 5:
                errMessage = "Invalid Capacity Entered!";
                break;
           
            case 6:
                errMessage = "Invalid Description Entered!";
                break;
        }
        JOptionPane.showMessageDialog(null, errMessage, "Error Message", JOptionPane.ERROR_MESSAGE);
    }
    
    private void removeValidationDisplay() {

        txtName.setBackground(Color.white);
        txtTime.setBackground(Color.white);
        txtDuration.setBackground(Color.white);
        txtCapacity.setBackground(Color.white);
        txtDescription.setBackground(Color.white);
    }
    
    private void saveFormToObject() {

        groupClassesList.remove(selectedGroupClass);
        selectedGroupClass.setName(txtName.getText());
        selectedGroupClass.setTime(txtTime.getText());
        selectedGroupClass.setTrainer((Employee)jComboTrainer.getSelectedItem());
        selectedGroupClass.setDuration(Integer.parseInt(txtDuration.getText()));
        selectedGroupClass.setCapacity(Integer.parseInt(txtCapacity.getText()));
        selectedGroupClass.setDescription(txtDescription.getText());

        // prompt user data bind success
        JOptionPane.showMessageDialog(null, "Congratulations, group classes details added successfully!", "Info", JOptionPane.INFORMATION_MESSAGE);
        populateTable();
        // remove all field values
        clearForm();
    }
    
    private void createGroupClass(ParentNetwork parentNetwork, Network network, Enterprise enterprise) {
        
        for(ParentNetwork pn: business.getParentNetworkDirectory().getParentNetworkList()){
            if(pn.getCountryName().equals(parentNetwork.getCountryName())){
                for(Network n: pn.getNetworkDirectory().getNetworkList()){
                    if(n.getCity().equals(network.getCity())){
                        for(Enterprise e: n.getEnterpriseDirectory().getEnterpriseList()){
                            if(e.getBranchName().equals(enterprise.getBranchName())){
                                GroupClasses groupClasses = e.getOrganizationDirectory().getGroupClassesDirectory().addGroupClasses(GroupClasses.classType.Customer);
                                groupClasses.setCapacity(Integer.parseInt(txtCapacity.getText()));
                                groupClasses.setDuration(Integer.parseInt(txtDuration.getText()));
                                groupClasses.setTime(txtTime.getText());
                                groupClasses.setName(txtName.getText());
                                groupClasses.setDescription(txtDescription.getText());
                                groupClasses.setTrainer((Employee)jComboTrainer.getSelectedItem());
                            }
                        }
                    }
                }
            }
        }
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> comboBranch;
    private javax.swing.JComboBox<String> comboCity;
    private javax.swing.JComboBox comboCountry;
    private javax.swing.JComboBox jComboTrainer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableGroupClasses;
    private javax.swing.JTextField txtCapacity;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtDuration;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtTime;
    // End of variables declaration//GEN-END:variables
}
